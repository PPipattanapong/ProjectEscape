using UnityEngine;
using System.Collections;

public class BookPuzzle : MonoBehaviour
{
    [Header("Puzzle Settings")]
    public GameObject[] books;        // ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public Transform[] slots;         // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á
    public string[] correctOrder;     // ‡πÉ‡∏ä‡πâ "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" ‡πÅ‡∏ó‡∏ô index

    [Header("Secret Door")]
    public GameObject secretDoor;     // ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    public float moveDuration = 2f;   // ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    public float moveOffsetX = 2f;    // ‚úÖ ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°

    [Header("Extra Riddle Panel")]
    public GameObject riddlePanel;    // Panel ‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤
    public GameObject specialBook;    // ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤

    [HideInInspector] public bool solved = false;

    void Start()
    {
        // ‡∏ß‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏° slot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        for (int i = 0; i < books.Length; i++)
        {
            books[i].transform.position = slots[i].position;

            var drag = books[i].AddComponent<BookDrag>();
            drag.Setup(this, i);
        }

        // ‡∏õ‡∏¥‡∏î panel ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
        if (riddlePanel != null)
            riddlePanel.SetActive(false);
    }

    void Update()
    {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤
        if (Input.GetMouseButtonDown(1)) // 1 = right click
        {
            Vector2 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
            RaycastHit2D hit = Physics2D.Raycast(mousePos, Vector2.zero);

            if (hit.collider != null && hit.collider.gameObject == specialBook)
            {
                Debug.Log("Right-clicked special book: " + specialBook.name);

                if (riddlePanel != null)
                {
                    riddlePanel.SetActive(true);

                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å MemoryPuzzle ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞ input
                    MemoryPuzzle mp = riddlePanel.GetComponent<MemoryPuzzle>();
                    if (mp != null)
                        mp.OpenPuzzle();
                }
            }
        }
    }
    public void SwapBooks(BookDrag a, BookDrag b)
    {
        if (solved) return;

        int indexA = a.index;
        int indexB = b.index;

        // ‡∏™‡∏•‡∏±‡∏ö reference ‡πÉ‡∏ô array
        GameObject temp = books[indexA];
        books[indexA] = books[indexB];
        books[indexB] = temp;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï index
        a.index = indexB;
        b.index = indexA;

        // Snap ‡∏ó‡∏∏‡∏Å‡πÄ‡∏•‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á slot ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô
        for (int i = 0; i < books.Length; i++)
        {
            books[i].transform.position = slots[i].position;
        }

        // Debug ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        string order = "";
        for (int i = 0; i < books.Length; i++)
        {
            order += books[i].name + (i < books.Length - 1 ? " | " : "");
        }
        Debug.Log("Current order: " + order);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        CheckSolved();
    }


    void CheckSolved()
    {
        for (int i = 0; i < books.Length; i++)
        {
            if (books[i].name != correctOrder[i])
                return;
        }

        solved = true; // üëà ‡πÅ‡∏Ñ‡πà flag ‡∏ô‡∏µ‡πâ‡∏û‡∏≠
        Debug.Log("Book puzzle solved!");

        if (riddlePanel != null)
            riddlePanel.SetActive(false);

        if (secretDoor != null)
            StartCoroutine(MoveSecretDoor());
    }


    IEnumerator MoveSecretDoor()
    {
        Vector3 startPos = secretDoor.transform.position;
        Vector3 endPos = new Vector3(startPos.x + moveOffsetX, startPos.y, startPos.z);

        float t = 0f;
        while (t < moveDuration)
        {
            t += Time.deltaTime;
            float progress = t / moveDuration;
            secretDoor.transform.position = Vector3.Lerp(startPos, endPos, progress);
            yield return null;
        }

        secretDoor.transform.position = endPos;
    }
}
